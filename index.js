const TelegramApi = require('node-telegram-bot-api')
const axios = require('axios')
const token = '6841869139:AAGsQ-6C3FJxfVPdfJko7Sa2evA0Hyz5Yy4'
const bot = new TelegramApi(token, {polling: true})
const fsPromises = require('fs').promises
const sequelize = require('./db')
const ListUsers = require('./models')

const instance = axios.create({
    baseURL: "https://www.clearvin.com/rest/vendor/",
});
let authUsersIdList = []
let allRequests = 0
let timeToRefresh = 0
let accessToken = ''
let status = ''

let listUsersUsed = {}

const KEYBOARD = {
    reply_markup: JSON.stringify({
        keyboard: [
            ['üÜî id', 'üí¨ info'],
            ['‚ûï add_user', 'ü™í delete_user'],
            ['‚úÖ VIN'],
        ],
        resize_keyboard: true
    })
}
const start = async () => {

    try {
        await sequelize.authenticate()
        await sequelize.sync()
    } catch (e) {
        console.log('Connect data failed', e)
    }


    await bot.setMyCommands([
        {command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'},
        {command: '/id', description: '–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID'},
    ])
    bot.onText(/(.+)/, async (msg, match) => {
            const first_name = msg.from.first_name
            const chatId = msg.chat.id


            try {
                if (match[0] === 'üÜî id' && await authenticate_users(chatId)) {
                    try {
                        const user = await ListUsers.findOne({chatId})
                        return bot.sendMessage(chatId, `${first_name}. –í–∞—à ID: ${user.chatId}`)
                    } catch (e) {
                        return bot.sendMessage(chatId, '–ù–∏–±—É–º–±—É–º')
                    }
                }
                if (match[0] === '‚úÖ VIN' && await authenticate_users(chatId)) {
                    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ VIN –∞–≤—Ç–æ (17 —Å–∏–º–≤–æ–ª–æ–≤)')
                }

                if (match[0].length === 17 && await authenticate_users(chatId)) {
                    const url = `report?vin=${msg.text}&format=pdf&reportTemplate=2021`
                    let timeNow = new Date().getTime() / 1000

                    if ((timeNow - timeToRefresh) > 7140 || timeToRefresh === 0) {
                        const res = await instance.post('login', {
                            email: "autopodberu1+1@gmail.com",
                            password: "TViGgDAg"
                        })
                        accessToken = res.data.token
                        status = res.data.status
                        timeToRefresh = new Date().getTime() / 1000
                    }

                    try {
                        if (status === 'ok') {
                            const {data} = await instance.get(url, {
                                headers: {Authorization: `Bearer ${accessToken}`},
                                responseType: "arraybuffer"
                            })
                            await fsPromises.writeFile(`./${chatId}file.pdf`, data, {encoding: 'binary'});
                            await bot.sendDocument(chatId, `./${chatId}file.pdf`, {}, {
                                filename: `${chatId}file.pdf`,
                                contentType: 'application/pdf'
                            })
                            await fsPromises.unlink(`./${chatId}file.pdf`)

                            allRequests += 1

                            await ListUsersUsed.findOne({first_name}).then((res) => {
                                if (res) {
                                    ListUsersUsed.checks += 1
                                }
                            }).catch(e => {
                                ListUsersUsed.create({first_name}).then(res => {
                                    ListUsersUsed.checks = 1
                                })
                            })
                            // await ListUsersUsed.create({first_name})

                            listUsersUsed[first_name] ? listUsersUsed[first_name] += 1 : listUsersUsed[first_name] = 1
                        }
                        if (status === 'error') {
                            return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
                        }
                    } catch (e) {
                        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞')
                    }

                }


                if (match[0] === '001100') {
                    try {
                        await ListUsers.create({chatId: chatId})
                        await bot.sendPhoto(chatId, './assets/cover.png')
                        return bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞', KEYBOARD)
                    } catch (e) {
                        const user = await ListUsers.findOne({chatId})
                        return user && bot.sendMessage(chatId, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', KEYBOARD)
                    }

                }
                if (match[0] === '‚ûï add_user' && await authenticate_users(chatId)) {
                    return bot.sendMessage(chatId, '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞, –Ω–æ–≤–æ–º—É —é–∑–µ—Ä—É –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∞—Ä–æ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞')
                }
                if (match[0] === 'ü™í delete_user' && await authenticate_users(chatId)) {
                    return bot.sendMessage(chatId, `–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä ID`)
                }
                if (Number.isInteger(+msg.text) && +msg.text.length > 6 && await authenticate_users(chatId)) {
                    try {
                        const user = await ListUsers.findOne({chatId})
                        ListUsers.destroy({
                            where: {chatId: user.chatId}
                        }).then(res => {
                            return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω`)
                        })
                        return
                    } catch (e) {
                        return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω`)
                    }
                }


                if (match[0] === 'üí¨ info' && await authenticate_users(chatId)) {
                    // const a = await ListUsers.findAll({attributes: ['chatId', 'checks']})
                    const userLists = await ListUsers.findAll()
                    const userList = userLists.map(u=>[u.chatId, u.checks])
                    return bot.sendMessage(chatId, userList.map(u => `\n<b>${u[0]}</b>: ${u[1]}`) + `\n<i>–≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${allRequests}</i>`, {parse_mode: 'HTML'})
                }


                if (allRequests !== 0 && (allRequests % 240 === 0 || allRequests % 245 === 0)) {
                    const allRequests = await ListUsers.findAll()
                    return bot.sendMessage(chatId, `–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ ${allRequests} –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–µ –∑–∞–±—É–¥—Ç—å–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç`)
                }


                if (match[0] &&  await authenticate_users(chatId) === false) {
                    return bot.sendMessage(chatId, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
                }
            } catch
                (e) {
                await bot.sendMessage(chatId, 'Something crashed on the server')
            }
        }
    )

}
const authenticate_users =  async (id) => {
        const user =  await ListUsers.findOne({id})
        return !!user
}


start()


